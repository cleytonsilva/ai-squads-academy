import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

// Carregar vari√°veis do .env
const envPath = path.join(process.cwd(), '.env');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  const envLines = envContent.split('\n');
  
  envLines.forEach(line => {
    const [key, value] = line.split('=');
    if (key && value) {
      process.env[key.trim()] = value.trim();
    }
  });
}

const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://ncrlojjfkhevjotchhxi.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5jcmxvampma2hldmpvdGNoaHhpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxOTc3MjMsImV4cCI6MjA2OTc3MzcyM30.YQlus7TgTNqGJ7lUOEYGBZJQJcJvKvQJGvQJGvQJGvQ';

const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * Teste mais realista que simula o fluxo real do AdminCourseEditor
 * Este teste verifica se o auto-save funciona quando o conte√∫do √© modificado
 * atrav√©s do estado do componente, n√£o diretamente no banco
 */
async function testRealisticExtensionFlow() {
  console.log('üß™ Iniciando teste realista de persist√™ncia de conte√∫do extendido...');
  
  try {
    // 1. Buscar m√≥dulos dispon√≠veis
    console.log('\nüìã Buscando m√≥dulos dispon√≠veis...');
    const { data: modules, error: modulesError } = await supabase
      .from('modules')
      .select('id, title, content_jsonb')
      .limit(1);
    
    if (modulesError) {
      console.error('‚ùå Erro ao buscar m√≥dulos:', modulesError);
      return;
    }
    
    if (!modules || modules.length === 0) {
      console.log('‚ö†Ô∏è Nenhum m√≥dulo encontrado para teste');
      return;
    }
    
    const testModule = modules[0];
    console.log(`‚úÖ M√≥dulo selecionado: ${testModule.title} (ID: ${testModule.id})`);
    
    // 2. Verificar conte√∫do atual
    const originalContent = testModule.content_jsonb?.html || '';
    const originalLength = originalContent.length;
    console.log(`üìè Tamanho do conte√∫do original: ${originalLength} caracteres`);
    
    // 3. Simular o processo de extens√£o como acontece no AdminCourseEditor
    console.log('\nüîÑ Simulando processo de extens√£o de conte√∫do...');
    
    // Primeiro, simular que o usu√°rio est√° editando o m√≥dulo
    console.log('üë§ Simulando sele√ß√£o do m√≥dulo no AdminCourseEditor...');
    
    // Simular extens√£o de conte√∫do (como faria o AIModuleExtendDialog)
    const extendedContent = `\n\n<h3>ü§ñ Conte√∫do Extendido por IA</h3>\n<p>Este √© um conte√∫do adicional gerado para testar a persist√™ncia. Timestamp: ${new Date().toISOString()}</p>\n<ul>\n<li>Ponto adicional 1</li>\n<li>Ponto adicional 2</li>\n<li>Ponto adicional 3</li>\n</ul>`;
    
    const newContent = originalContent + extendedContent;
    const newLength = newContent.length;
    
    console.log(`üìè Novo tamanho: ${newLength} caracteres (+${newLength - originalLength})`);
    
    // 4. Simular o salvamento como faria o AdminCourseEditor.handleSaveModule
    console.log('\nüíæ Simulando salvamento atrav√©s do AdminCourseEditor...');
    
    const updateData = {
      content_jsonb: {
        html: newContent,
        last_saved: new Date().toISOString(),
        word_count: newContent.replace(/<[^>]*>/g, '').split(/\s+/).filter(word => word.length > 0).length,
        version: (testModule.content_jsonb?.version || 0) + 1
      }
    };
    
    console.log('üì§ Dados a serem salvos:', {
      contentLength: updateData.content_jsonb.html.length,
      wordCount: updateData.content_jsonb.word_count,
      version: updateData.content_jsonb.version,
      lastSaved: updateData.content_jsonb.last_saved
    });
    
    const { error: updateError } = await supabase
      .from('modules')
      .update(updateData)
      .eq('id', testModule.id);
    
    if (updateError) {
      console.error('‚ùå Erro ao atualizar m√≥dulo:', updateError);
      return;
    }
    
    console.log('‚úÖ Conte√∫do salvo com sucesso!');
    
    // 5. Aguardar um momento para simular o tempo real
    console.log('\n‚è≥ Aguardando 3 segundos para verificar persist√™ncia...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 6. Verificar se o conte√∫do persistiu
    console.log('\nüîç Verificando persist√™ncia...');
    const { data: updatedModule, error: fetchError } = await supabase
      .from('modules')
      .select('content_jsonb')
      .eq('id', testModule.id)
      .single();
    
    if (fetchError) {
      console.error('‚ùå Erro ao buscar m√≥dulo atualizado:', fetchError);
      return;
    }
    
    const persistedContent = updatedModule.content_jsonb?.html || '';
    const persistedLength = persistedContent.length;
    
    console.log(`üìè Tamanho do conte√∫do persistido: ${persistedLength} caracteres`);
    
    // 7. Analisar resultados
    console.log('\nüìä Resultados do teste:');
    
    const contentPreserved = persistedContent.includes(originalContent);
    const extensionPresent = persistedContent.includes('ü§ñ Conte√∫do Extendido por IA');
    const sizeCorrect = persistedLength === newLength;
    
    console.log(`‚úÖ Conte√∫do original preservado: ${contentPreserved ? 'SIM' : 'N√ÉO'}`);
    console.log(`‚úÖ Conte√∫do extendido presente: ${extensionPresent ? 'SIM' : 'N√ÉO'}`);
    console.log(`‚úÖ Tamanho correto: ${sizeCorrect ? 'SIM' : 'N√ÉO'}`);
    
    if (contentPreserved && extensionPresent && sizeCorrect) {
      console.log('\nüéâ TESTE PASSOU! A persist√™ncia est√° funcionando corretamente.');
    } else {
      console.log('\n‚ùå TESTE FALHOU! H√° problemas com a persist√™ncia do conte√∫do extendido.');
      
      console.log('\nüîç Detalhes do problema:');
      if (!contentPreserved) console.log('  - Conte√∫do original foi perdido');
      if (!extensionPresent) console.log('  - Conte√∫do extendido n√£o foi salvo');
      if (!sizeCorrect) console.log(`  - Tamanho incorreto (esperado: ${newLength}, atual: ${persistedLength})`);
      
      console.log('\nüìù Conte√∫do atual no banco:');
      console.log(persistedContent.substring(0, 500) + (persistedContent.length > 500 ? '...' : ''));
    }
    
    // 8. Restaurar conte√∫do original
    console.log('\nüßπ Restaurando conte√∫do original...');
    const { error: restoreError } = await supabase
      .from('modules')
      .update({
        content_jsonb: {
          html: originalContent,
          last_saved: new Date().toISOString(),
          word_count: originalContent.replace(/<[^>]*>/g, '').split(/\s+/).filter(word => word.length > 0).length,
          version: (testModule.content_jsonb?.version || 0) + 2
        }
      })
      .eq('id', testModule.id);
    
    if (restoreError) {
      console.error('‚ùå Erro ao restaurar conte√∫do original:', restoreError);
    } else {
      console.log('‚úÖ Conte√∫do original restaurado com sucesso!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
  
  console.log('\nüèÅ Teste conclu√≠do!');
}

// Executar o teste
testRealisticExtensionFlow().then(() => {
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Erro fatal:', error);
  process.exit(1);
});