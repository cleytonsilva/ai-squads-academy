import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes do Supabase
const supabaseUrl = 'https://ncrlojjfkhevjotchhxi.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5jcmxvampma2hldmpvdGNoaHhpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxOTc3MjMsImV4cCI6MjA2OTc3MzcyM30.f3DPtL3s_J7vzk0JmYsfkbd7Yyx1IDpy1IN-k6cwiZY';
const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * Teste para verificar persist√™ncia no banco de dados
 */
async function testDatabasePersistence() {
  console.log('üîç Testando persist√™ncia no banco de dados...');
  
  try {
    // 1. Buscar um m√≥dulo para teste
    const { data: modules, error: fetchError } = await supabase
      .from('modules')
      .select('id, title, content_jsonb')
      .limit(1);
      
    if (fetchError) {
      console.error('‚ùå Erro ao buscar m√≥dulos:', fetchError);
      return;
    }
    
    if (!modules || modules.length === 0) {
      console.log('‚ö†Ô∏è Nenhum m√≥dulo encontrado para teste');
      return;
    }
    
    const testModule = modules[0];
    const originalContent = testModule.content_jsonb?.html || '';
    
    console.log('üìã M√≥dulo de teste:', {
      id: testModule.id,
      title: testModule.title,
      originalContentLength: originalContent.length,
      originalContentJsonb: testModule.content_jsonb
    });
    
    // 2. Criar conte√∫do estendido com timestamp √∫nico
    const timestamp = new Date().toISOString();
    const uniqueMarker = `TEST_${Date.now()}`;
    const extendedContent = originalContent + `\n\n<p>ü§ñ ${uniqueMarker} - Conte√∫do estendido por IA para teste de persist√™ncia - ${timestamp}</p>`;
    
    console.log('ü§ñ Criando conte√∫do estendido...');
    console.log('üìä Dados da extens√£o:', {
      originalLength: originalContent.length,
      extendedLength: extendedContent.length,
      addedContent: extendedContent.length - originalContent.length,
      uniqueMarker
    });
    
    // 3. Salvar conte√∫do estendido com metadados
    const updateData = {
      content_jsonb: { 
        html: extendedContent,
        last_saved: timestamp,
        word_count: extendedContent.replace(/<[^>]*>/g, '').split(/\s+/).filter(word => word.length > 0).length,
        version: Date.now(),
        test_marker: uniqueMarker,
        extended: true
      },
      updated_at: timestamp
    };
    
    console.log('üíæ Salvando no banco de dados...');
    console.log('üìÑ Dados a serem salvos:', updateData);
    
    const { error: updateError } = await supabase
      .from('modules')
      .update(updateData)
      .eq('id', testModule.id);
      
    if (updateError) {
      console.error('‚ùå Erro ao salvar conte√∫do estendido:', updateError);
      return;
    }
    
    console.log('‚úÖ Conte√∫do estendido salvo com sucesso');
    
    // 4. Verifica√ß√£o imediata
    console.log('üîç Verifica√ß√£o imediata...');
    const { data: immediateCheck, error: immediateError } = await supabase
      .from('modules')
      .select('content_jsonb, updated_at')
      .eq('id', testModule.id)
      .single();
      
    if (immediateError) {
      console.error('‚ùå Erro na verifica√ß√£o imediata:', immediateError);
      return;
    }
    
    const immediateContent = immediateCheck.content_jsonb?.html || '';
    const hasMarker = immediateContent.includes(uniqueMarker);
    
    console.log('üìä Verifica√ß√£o imediata:', {
      contentLength: immediateContent.length,
      hasUniqueMarker: hasMarker,
      updatedAt: immediateCheck.updated_at,
      contentJsonb: immediateCheck.content_jsonb
    });
    
    if (!hasMarker) {
      console.log('‚ùå FALHA IMEDIATA: Marcador √∫nico n√£o encontrado!');
      return;
    }
    
    // 5. Aguardar e verificar novamente (simular delay do debounce)
    console.log('‚è≥ Aguardando 5 segundos para verificar persist√™ncia...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // 6. Verifica√ß√£o final
    console.log('üîç Verifica√ß√£o final...');
    const { data: finalCheck, error: finalError } = await supabase
      .from('modules')
      .select('content_jsonb, updated_at')
      .eq('id', testModule.id)
      .single();
      
    if (finalError) {
      console.error('‚ùå Erro na verifica√ß√£o final:', finalError);
      return;
    }
    
    const finalContent = finalCheck.content_jsonb?.html || '';
    const finalHasMarker = finalContent.includes(uniqueMarker);
    
    console.log('üìä Verifica√ß√£o final:', {
      originalLength: originalContent.length,
      extendedLength: extendedContent.length,
      finalLength: finalContent.length,
      hasUniqueMarker: finalHasMarker,
      contentPreserved: finalContent === extendedContent,
      contentLost: finalContent === originalContent,
      updatedAt: finalCheck.updated_at,
      contentJsonb: finalCheck.content_jsonb
    });
    
    if (finalContent === extendedContent && finalHasMarker) {
      console.log('‚úÖ SUCESSO: Conte√∫do estendido foi preservado no banco de dados!');
      console.log('üéØ O problema N√ÉO est√° na persist√™ncia do banco');
    } else if (finalContent === originalContent) {
      console.log('‚ùå FALHA: Conte√∫do foi revertido para o original');
      console.log('‚ö†Ô∏è O problema EST√Å na persist√™ncia do banco ou h√° sobrescrita');
    } else if (!finalHasMarker) {
      console.log('‚ùå FALHA: Marcador √∫nico foi perdido');
      console.log('‚ö†Ô∏è Conte√∫do foi modificado por outro processo');
    } else {
      console.log('‚ö†Ô∏è RESULTADO INESPERADO: Conte√∫do foi modificado de forma inesperada');
      console.log('üìÑ Conte√∫do final:', finalContent.substring(0, 500) + '...');
    }
    
    // 7. Restaurar conte√∫do original
    console.log('üîÑ Restaurando conte√∫do original...');
    const { error: restoreError } = await supabase
      .from('modules')
      .update({ 
        content_jsonb: { html: originalContent },
        updated_at: new Date().toISOString()
      })
      .eq('id', testModule.id);
      
    if (restoreError) {
      console.error('‚ùå Erro ao restaurar conte√∫do:', restoreError);
    } else {
      console.log('‚úÖ Conte√∫do original restaurado');
    }
    
  } catch (error) {
    console.error('‚ùå Erro inesperado no teste:', error);
  }
}

// Executar o teste
testDatabasePersistence();