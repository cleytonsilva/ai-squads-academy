import { supabase } from '@/integrations/supabase/client';

/**
 * Utilit√°rio para executar opera√ß√µes do Supabase com retry autom√°tico
 * Implementa refresh de token quando necess√°rio
 */
export async function supabaseWithRetry<T>(
  operation: () => Promise<{ data: T; error: any }>
): Promise<{ data: T; error: any }> {
  console.log('üîÑ supabaseWithRetry: Executando opera√ß√£o...');
  
  let result = await operation();
  
  // Verificar se o erro √© relacionado a token expirado
  if (result.error?.message?.includes('JWT expired') || 
      result.error?.message?.includes('invalid JWT') ||
      result.error?.code === 'PGRST301') {
    
    console.log('üîÑ supabaseWithRetry: Token expirado, tentando refresh...');
    
    try {
      const { error: refreshError } = await supabase.auth.refreshSession();
      
      if (!refreshError) {
        console.log('‚úÖ supabaseWithRetry: Token refreshed, tentando opera√ß√£o novamente...');
        result = await operation();
        
        if (!result.error) {
          console.log('‚úÖ supabaseWithRetry: Opera√ß√£o bem-sucedida ap√≥s refresh');
        } else {
          console.warn('‚ö†Ô∏è supabaseWithRetry: Opera√ß√£o falhou mesmo ap√≥s refresh:', result.error);
        }
      } else {
        console.error('‚ùå supabaseWithRetry: Falha no refresh do token:', refreshError);
      }
    } catch (refreshException) {
      console.error('‚ùå supabaseWithRetry: Exce√ß√£o durante refresh:', refreshException);
    }
  } else if (result.error) {
    console.warn('‚ö†Ô∏è supabaseWithRetry: Erro n√£o relacionado a token:', result.error);
  } else {
    console.log('‚úÖ supabaseWithRetry: Opera√ß√£o bem-sucedida');
  }
  
  return result;
}

/**
 * Vers√£o espec√≠fica para opera√ß√µes de m√≥dulos
 * Adiciona logs espec√≠ficos para debugging de problemas de persist√™ncia
 */
export async function supabaseModuleRetry<T>(
  operation: () => Promise<{ data: T; error: any }>,
  moduleId?: string,
  operationType?: string
): Promise<{ data: T; error: any }> {
  console.log('üìù supabaseModuleRetry: Executando opera√ß√£o de m√≥dulo:', {
    moduleId,
    operationType,
    timestamp: new Date().toISOString()
  });
  
  const result = await supabaseWithRetry(operation);
  
  if (result.error) {
    console.error('‚ùå supabaseModuleRetry: Erro na opera√ß√£o de m√≥dulo:', {
      moduleId,
      operationType,
      error: result.error,
      timestamp: new Date().toISOString()
    });
  } else {
    console.log('‚úÖ supabaseModuleRetry: Opera√ß√£o de m√≥dulo bem-sucedida:', {
      moduleId,
      operationType,
      timestamp: new Date().toISOString()
    });
  }
  
  return result;
}

/**
 * Hook para interceptar requisi√ß√µes e adicionar logs de debug
 * √ötil para diagnosticar problemas de autentica√ß√£o
 */
export function enableRequestInterceptor() {
  if (typeof window !== 'undefined' && !window.__supabase_interceptor_enabled) {
    const originalFetch = window.fetch;
    
    window.fetch = function(...args) {
      const url = args[0];
      const options = args[1] || {};
      
      // Log apenas requisi√ß√µes para Supabase
      if (typeof url === 'string' && url.includes('supabase.co')) {
        console.log('üåê Requisi√ß√£o Supabase:', {
          url,
          method: options.method || 'GET',
          headers: options.headers,
          timestamp: new Date().toISOString()
        });
      }
      
      return originalFetch.apply(this, args);
    };
    
    window.__supabase_interceptor_enabled = true;
    console.log('üîç Request interceptor habilitado para debug');
  }
}

/**
 * Desabilita o interceptor de requisi√ß√µes
 */
export function disableRequestInterceptor() {
  if (typeof window !== 'undefined' && window.__supabase_interceptor_enabled) {
    // Restaurar fetch original seria complexo, ent√£o apenas marcamos como desabilitado
    window.__supabase_interceptor_enabled = false;
    console.log('üîç Request interceptor desabilitado');
  }
}

// Declara√ß√£o de tipos para o window
declare global {
  interface Window {
    __supabase_interceptor_enabled?: boolean;
  }
}