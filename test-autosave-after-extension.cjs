const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://wnpqgvzjbdqjqzqzqzqz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InducHFndnpqYmRxanF6cXpxenF6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQ5NzE5NzYsImV4cCI6MjA1MDU0Nzk3Nn0.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';
const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * Teste espec√≠fico para verificar se o auto-save funciona ap√≥s extens√£o de conte√∫do
 * Simula exatamente o fluxo do AdminCourseEditor
 */
async function testAutoSaveAfterExtension() {
  console.log('üß™ Testando auto-save ap√≥s extens√£o de conte√∫do...');
  
  try {
    // 1. Buscar um m√≥dulo para teste
    console.log('\nüìã Buscando m√≥dulo para teste...');
    const { data: modules, error: modulesError } = await supabase
      .from('modules')
      .select('id, title, content_jsonb')
      .limit(1);
    
    if (modulesError) {
      console.error('‚ùå Erro ao buscar m√≥dulos:', modulesError);
      return;
    }
    
    if (!modules || modules.length === 0) {
      console.log('‚ö†Ô∏è Nenhum m√≥dulo encontrado para teste');
      return;
    }
    
    const testModule = modules[0];
    console.log(`‚úÖ M√≥dulo selecionado: ${testModule.title} (ID: ${testModule.id})`);
    
    // 2. Salvar estado original
    const originalContent = testModule.content_jsonb?.html || '';
    const originalLength = originalContent.length;
    console.log(`üìè Conte√∫do original: ${originalLength} caracteres`);
    
    // 3. Simular extens√£o de conte√∫do (como faz o AIModuleExtendDialog)
    console.log('\nü§ñ Simulando extens√£o de conte√∫do...');
    const extendedContent = `\n\n<h3>ü§ñ Conte√∫do Extendido por IA - Teste Auto-Save</h3>\n<p>Este conte√∫do foi adicionado para testar o auto-save. Timestamp: ${new Date().toISOString()}</p>\n<ul>\n<li>Teste de persist√™ncia 1</li>\n<li>Teste de persist√™ncia 2</li>\n<li>Teste de persist√™ncia 3</li>\n</ul>`;
    
    const newContent = originalContent + extendedContent;
    const newLength = newContent.length;
    
    console.log(`üìè Novo conte√∫do: ${newLength} caracteres (+${newLength - originalLength})`);
    
    // 4. Simular o que acontece no AdminCourseEditor.onExtended
    console.log('\nüîÑ Simulando fluxo do AdminCourseEditor...');
    
    // Simular setIsExtendingContent(true)
    console.log('üõ°Ô∏è Ativando prote√ß√£o isExtendingContent...');
    
    // Simular setModuleHtml(newContent)
    console.log('üìù Atualizando estado moduleHtml...');
    
    // Simular setTimeout para setHasUnsavedChanges(true) e setIsExtendingContent(false)
    console.log('‚è±Ô∏è Aguardando 200ms para simular setTimeout...');
    await new Promise(resolve => setTimeout(resolve, 200));
    
    console.log('‚úÖ hasUnsavedChanges = true, isExtendingContent = false');
    
    // 5. Simular o auto-save (como faz o useEffect)
    console.log('\nüíæ Simulando auto-save...');
    
    // Aguardar um pouco para simular o debounce
    console.log('‚è±Ô∏è Aguardando debounce (1 segundo)...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Simular handleSaveModule
    console.log('üíæ Executando salvamento...');
    
    const updateData = {
      content_jsonb: {
        html: newContent,
        last_saved: new Date().toISOString(),
        word_count: newContent.replace(/<[^>]*>/g, '').split(/\s+/).filter(word => word.length > 0).length,
        version: (testModule.content_jsonb?.version || 0) + 1
      }
    };
    
    console.log('üì§ Dados do salvamento:', {
      contentLength: updateData.content_jsonb.html.length,
      wordCount: updateData.content_jsonb.word_count,
      version: updateData.content_jsonb.version
    });
    
    const { error: updateError } = await supabase
      .from('modules')
      .update(updateData)
      .eq('id', testModule.id);
    
    if (updateError) {
      console.error('‚ùå Erro ao salvar:', updateError);
      return;
    }
    
    console.log('‚úÖ Conte√∫do salvo com sucesso!');
    
    // 6. Verificar se foi realmente salvo
    console.log('\nüîç Verificando persist√™ncia...');
    
    const { data: verifyModule, error: verifyError } = await supabase
      .from('modules')
      .select('content_jsonb')
      .eq('id', testModule.id)
      .single();
    
    if (verifyError) {
      console.error('‚ùå Erro ao verificar:', verifyError);
      return;
    }
    
    const savedContent = verifyModule.content_jsonb?.html || '';
    const savedLength = savedContent.length;
    
    console.log(`üìè Conte√∫do verificado: ${savedLength} caracteres`);
    
    // Verificar se cont√©m o conte√∫do original e o estendido
    const hasOriginal = savedContent.includes(originalContent.substring(0, 100));
    const hasExtended = savedContent.includes('Conte√∫do Extendido por IA - Teste Auto-Save');
    
    console.log('\nüìä Resultados da verifica√ß√£o:');
    console.log(`‚úÖ Cont√©m conte√∫do original: ${hasOriginal}`);
    console.log(`‚úÖ Cont√©m conte√∫do estendido: ${hasExtended}`);
    console.log(`‚úÖ Tamanho correto: ${savedLength === newLength}`);
    
    if (hasOriginal && hasExtended && savedLength === newLength) {
      console.log('\nüéâ SUCESSO! Auto-save funcionou corretamente ap√≥s extens√£o!');
    } else {
      console.log('\n‚ùå FALHA! Auto-save n√£o funcionou como esperado.');
    }
    
    // 7. Restaurar conte√∫do original
    console.log('\nüßπ Restaurando conte√∫do original...');
    
    const { error: restoreError } = await supabase
      .from('modules')
      .update({
        content_jsonb: {
          html: originalContent,
          last_saved: new Date().toISOString(),
          word_count: originalContent.replace(/<[^>]*>/g, '').split(/\s+/).filter(word => word.length > 0).length,
          version: (testModule.content_jsonb?.version || 0) + 2
        }
      })
      .eq('id', testModule.id);
    
    if (restoreError) {
      console.error('‚ùå Erro ao restaurar:', restoreError);
    } else {
      console.log('‚úÖ Conte√∫do original restaurado!');
    }
    
    console.log('\nüèÅ Teste conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar o teste
testAutoSaveAfterExtension();