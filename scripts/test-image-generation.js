/**
 * Script de teste end-to-end para o sistema de gera√ß√£o de imagens
 * Testa todo o fluxo: gera√ß√£o ‚Üí webhook ‚Üí salvamento ‚Üí exibi√ß√£o
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
  console.error('Necess√°rio: VITE_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

/**
 * Cria um curso de teste
 */
async function createTestCourse() {
  console.log('üìù Criando curso de teste...');
  
  const { data, error } = await supabase
    .from('courses')
    .insert({
      title: 'Curso de Teste - Gera√ß√£o de Imagens',
      description: 'Curso criado automaticamente para testar o sistema de gera√ß√£o de imagens com IA. Este curso aborda programa√ß√£o, design e tecnologia.',
      is_published: false,
      status: 'draft'
    })
    .select()
    .single();

  if (error) {
    throw new Error(`Erro ao criar curso: ${error.message}`);
  }

  console.log(`‚úÖ Curso criado: ${data.id}`);
  return data;
}

/**
 * Testa a gera√ß√£o de capa
 */
async function testCoverGeneration(courseId, engine = 'flux') {
  console.log(`üé® Testando gera√ß√£o de capa com engine: ${engine}`);
  
  const { data, error } = await supabase.functions.invoke('generate-course-cover', {
    body: {
      courseId,
      engine,
      regenerate: true
    }
  });

  if (error) {
    throw new Error(`Erro na gera√ß√£o: ${error.message}`);
  }

  if (!data?.success && !data?.predictionId) {
    throw new Error(`Resposta inesperada: ${JSON.stringify(data)}`);
  }

  console.log(`‚úÖ Gera√ß√£o iniciada: ${data.predictionId}`);
  return data.predictionId;
}

/**
 * Monitora o progresso da predi√ß√£o
 */
async function monitorPrediction(predictionId, maxWaitTime = 300000) { // 5 minutos
  console.log(`‚è≥ Monitorando predi√ß√£o: ${predictionId}`);
  
  const startTime = Date.now();
  
  while (Date.now() - startTime < maxWaitTime) {
    const { data, error } = await supabase
      .from('replicate_predictions')
      .select('*')
      .eq('prediction_id', predictionId)
      .single();

    if (error) {
      console.warn(`‚ö†Ô∏è Erro ao buscar predi√ß√£o: ${error.message}`);
      await new Promise(resolve => setTimeout(resolve, 5000));
      continue;
    }

    console.log(`üìä Status: ${data.status}`);

    if (data.status === 'succeeded') {
      console.log(`‚úÖ Predi√ß√£o conclu√≠da com sucesso!`);
      console.log(`üñºÔ∏è Output: ${data.output}`);
      return data;
    }

    if (data.status === 'failed') {
      throw new Error(`Predi√ß√£o falhou: ${data.error}`);
    }

    // Aguardar antes da pr√≥xima verifica√ß√£o
    await new Promise(resolve => setTimeout(resolve, 10000)); // 10 segundos
  }

  throw new Error('Timeout: Predi√ß√£o n√£o foi conclu√≠da no tempo esperado');
}

/**
 * Verifica se a capa foi atualizada no curso
 */
async function verifyCourseUpdate(courseId, originalCoverUrl) {
  console.log('üîç Verificando atualiza√ß√£o da capa no curso...');
  
  const { data, error } = await supabase
    .from('courses')
    .select('cover_image_url, thumbnail_url')
    .eq('id', courseId)
    .single();

  if (error) {
    throw new Error(`Erro ao buscar curso: ${error.message}`);
  }

  if (!data.cover_image_url) {
    throw new Error('Capa n√£o foi atualizada no curso');
  }

  if (data.cover_image_url === originalCoverUrl) {
    throw new Error('Capa n√£o foi alterada');
  }

  console.log(`‚úÖ Capa atualizada: ${data.cover_image_url}`);
  return data.cover_image_url;
}

/**
 * Testa o acesso √† imagem
 */
async function testImageAccess(imageUrl) {
  console.log('üåê Testando acesso √† imagem...');
  
  try {
    const response = await fetch(imageUrl);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.startsWith('image/')) {
      throw new Error(`Tipo de conte√∫do inv√°lido: ${contentType}`);
    }

    console.log(`‚úÖ Imagem acess√≠vel (${contentType})`);
    return true;
  } catch (error) {
    throw new Error(`Erro ao acessar imagem: ${error.message}`);
  }
}

/**
 * Limpa dados de teste
 */
async function cleanup(courseId) {
  console.log('üßπ Limpando dados de teste...');
  
  // Remover predi√ß√µes relacionadas
  await supabase
    .from('replicate_predictions')
    .delete()
    .eq('course_id', courseId);

  // Remover eventos relacionados
  await supabase
    .from('generation_events')
    .delete()
    .match({ 'event_data->>course_id': courseId });

  // Remover curso
  await supabase
    .from('courses')
    .delete()
    .eq('id', courseId);

  console.log('‚úÖ Limpeza conclu√≠da');
}

/**
 * Fun√ß√£o principal de teste
 */
async function runTests() {
  console.log('üöÄ Iniciando teste end-to-end do sistema de gera√ß√£o de imagens\n');
  
  let course = null;
  
  try {
    // 1. Criar curso de teste
    course = await createTestCourse();
    const originalCoverUrl = course.cover_image_url;
    
    // 2. Testar gera√ß√£o com Flux
    console.log('\n--- Testando com engine Flux ---');
    const fluxPredictionId = await testCoverGeneration(course.id, 'flux');
    const fluxResult = await monitorPrediction(fluxPredictionId);
    const fluxCoverUrl = await verifyCourseUpdate(course.id, originalCoverUrl);
    await testImageAccess(fluxCoverUrl);
    
    // 3. Testar gera√ß√£o com Recraft
    console.log('\n--- Testando com engine Recraft ---');
    const recraftPredictionId = await testCoverGeneration(course.id, 'recraft');
    const recraftResult = await monitorPrediction(recraftPredictionId);
    const recraftCoverUrl = await verifyCourseUpdate(course.id, fluxCoverUrl);
    await testImageAccess(recraftCoverUrl);
    
    // 4. Verificar estat√≠sticas
    console.log('\n--- Verificando estat√≠sticas ---');
    const { data: stats } = await supabase.rpc('get_generation_stats');
    console.log(`üìä Estat√≠sticas:`, stats);
    
    console.log('\nüéâ Todos os testes passaram com sucesso!');
    console.log('\nüìã Resumo:');
    console.log(`   ‚Ä¢ Curso criado: ${course.id}`);
    console.log(`   ‚Ä¢ Flux - Predi√ß√£o: ${fluxPredictionId}`);
    console.log(`   ‚Ä¢ Flux - Capa: ${fluxCoverUrl}`);
    console.log(`   ‚Ä¢ Recraft - Predi√ß√£o: ${recraftPredictionId}`);
    console.log(`   ‚Ä¢ Recraft - Capa: ${recraftCoverUrl}`);
    
  } catch (error) {
    console.error(`\n‚ùå Teste falhou: ${error.message}`);
    console.error(error.stack);
    process.exit(1);
  } finally {
    if (course) {
      await cleanup(course.id);
    }
  }
}

// Executar testes se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests().catch(console.error);
}

export { runTests };