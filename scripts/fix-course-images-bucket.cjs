/**
 * Script para Corrigir o Bucket course-images
 * 
 * Este script verifica se o bucket course-images existe e o cria se necess√°rio,
 * resolvendo o problema principal identificado no diagn√≥stico.
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase
const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_SERVICE_ROLE = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE) {
  console.error('‚ùå Vari√°veis de ambiente VITE_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');
  process.exit(1);
}

// Cliente com SERVICE_ROLE para opera√ß√µes administrativas
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE);

/**
 * Verifica se o bucket course-images existe
 */
async function checkBucketExists() {
  console.log('üîç Verificando se bucket course-images existe...');
  
  try {
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('‚ùå Erro ao listar buckets:', error.message);
      return false;
    }
    
    const courseImagesBucket = buckets.find(bucket => bucket.id === 'course-images');
    
    if (courseImagesBucket) {
      console.log('‚úÖ Bucket course-images encontrado!');
      console.log(`   - P√∫blico: ${courseImagesBucket.public}`);
      console.log(`   - Criado em: ${courseImagesBucket.created_at}`);
      return true;
    } else {
      console.log('‚ùå Bucket course-images N√ÉO encontrado');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erro inesperado ao verificar bucket:', error.message);
    return false;
  }
}

/**
 * Cria o bucket course-images
 */
async function createBucket() {
  console.log('\nüîß Criando bucket course-images...');
  
  try {
    const { data, error } = await supabase.storage.createBucket('course-images', {
      public: true,
      fileSizeLimit: 10485760, // 10MB
      allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp', 'image/gif']
    });
    
    if (error) {
      console.error('‚ùå Erro ao criar bucket:', error.message);
      return false;
    }
    
    console.log('‚úÖ Bucket course-images criado com sucesso!');
    console.log('   - ID:', data.name);
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro inesperado ao criar bucket:', error.message);
    return false;
  }
}

/**
 * Configura pol√≠ticas RLS b√°sicas para o bucket
 */
async function setupBasicPolicies() {
  console.log('\nüîê Configurando pol√≠ticas RLS b√°sicas...');
  
  try {
    // Nota: As pol√≠ticas RLS para storage s√£o geralmente configuradas via SQL
    // Este script foca apenas na cria√ß√£o do bucket
    console.log('‚ÑπÔ∏è  Pol√≠ticas RLS devem ser configuradas via migra√ß√£o SQL');
    console.log('   Arquivo: supabase/migrations/20250202_setup_course_covers_storage.sql');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao configurar pol√≠ticas:', error.message);
    return false;
  }
}

/**
 * Testa o bucket criado
 */
async function testBucket() {
  console.log('\nüß™ Testando bucket criado...');
  
  try {
    // Tentar listar arquivos (teste de leitura)
    const { data: files, error: listError } = await supabase.storage
      .from('course-images')
      .list('', { limit: 1 });
    
    if (listError) {
      console.error('‚ùå Erro ao listar arquivos:', listError.message);
      return false;
    }
    
    console.log('‚úÖ Leitura do bucket funcionando');
    
    // Tentar upload de teste (usando tipo MIME permitido)
    const testFile = new Blob(['test image data'], { type: 'image/png' });
    const testFileName = `test-${Date.now()}.png`;
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('course-images')
      .upload(testFileName, testFile);
    
    if (uploadError) {
      console.log('‚ö†Ô∏è  Upload de teste falhou (esperado se RLS n√£o estiver configurado):', uploadError.message);
      return true; // N√£o √© erro cr√≠tico, bucket existe
    }
    
    console.log('‚úÖ Upload de teste funcionou!');
    
    // Limpar arquivo de teste
    await supabase.storage
      .from('course-images')
      .remove([testFileName]);
    
    console.log('‚úÖ Limpeza do arquivo de teste conclu√≠da');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro no teste do bucket:', error.message);
    return false;
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  console.log('üîß CORRE√á√ÉO: Bucket course-images');
  console.log('=' .repeat(40));
  
  try {
    // Verificar se bucket existe
    const bucketExists = await checkBucketExists();
    
    if (!bucketExists) {
      // Criar bucket se n√£o existir
      const created = await createBucket();
      
      if (!created) {
        console.error('‚ùå Falha ao criar bucket. Verifique permiss√µes e configura√ß√µes.');
        process.exit(1);
      }
      
      // Configurar pol√≠ticas b√°sicas
      await setupBasicPolicies();
    }
    
    // Testar bucket
    const testPassed = await testBucket();
    
    if (testPassed) {
      console.log('\n‚úÖ Bucket course-images est√° funcionando!');
      console.log('\nüìã Pr√≥ximos passos:');
      console.log('   1. Aplicar migra√ß√£o SQL para pol√≠ticas RLS:');
      console.log('      supabase db push');
      console.log('   2. Testar upload manual no CourseCoverManager');
      console.log('   3. Verificar se usu√°rio tem role admin/instructor');
    } else {
      console.error('‚ùå Bucket criado mas com problemas. Verifique configura√ß√µes.');
      process.exit(1);
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error.message);
    process.exit(1);
  }
}

// Executar corre√ß√£o
main();