/**
 * Script de Teste - Verifica√ß√£o da Corre√ß√£o
 * 
 * Este script testa se a corre√ß√£o implementada resolve o problema
 * de salvamento do conte√∫do estendido no m√≥dulo.
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  const prefix = {
    info: 'üìã',
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    debug: 'üîç'
  }[type] || 'üìã';
  
  console.log(`${prefix} [${timestamp}] ${message}`);
}

/**
 * Teste da corre√ß√£o implementada
 */
async function testFix() {
  try {
    log('üöÄ Testando corre√ß√£o do problema de salvamento de conte√∫do estendido\n');
    
    // 1. Buscar um m√≥dulo para teste
    log('1Ô∏è‚É£ Buscando m√≥dulo para teste...');
    const { data: modules, error } = await supabase
      .from('modules')
      .select('id, title, content_jsonb')
      .limit(1);
    
    if (error) throw error;
    if (!modules || modules.length === 0) {
      throw new Error('Nenhum m√≥dulo encontrado');
    }
    
    const testModule = modules[0];
    const originalContent = testModule.content_jsonb?.html || '';
    
    log(`M√≥dulo selecionado: ${testModule.title}`);
    log(`Conte√∫do original: ${originalContent.substring(0, 100)}...`, 'debug');
    
    // 2. Simular extens√£o com IA
    log('\n2Ô∏è‚É£ Simulando extens√£o com IA...');
    const extendedContent = '<p><strong>Conte√∫do Estendido pela IA:</strong></p><p>Este √© um exemplo pr√°tico de como implementar as t√©cnicas de seguran√ßa discutidas. Vamos criar um exerc√≠cio onde voc√™ deve identificar vulnerabilidades em um c√≥digo de exemplo.</p><p><strong>Exerc√≠cio Pr√°tico:</strong></p><ol><li>Analise o c√≥digo fornecido</li><li>Identifique pelo menos 3 vulnerabilidades</li><li>Proponha solu√ß√µes para cada vulnerabilidade encontrada</li></ol>';
    
    // Simular a concatena√ß√£o que acontece no frontend
    const combinedContent = `${originalContent}\n${extendedContent}`;
    
    log(`Conte√∫do estendido adicionado`);
    log(`Tamanho do conte√∫do combinado: ${combinedContent.length} caracteres`);
    
    // 3. Salvar o conte√∫do combinado
    log('\n3Ô∏è‚É£ Salvando conte√∫do combinado...');
    const { error: saveError } = await supabase
      .from('modules')
      .update({ 
        content_jsonb: { html: combinedContent }
      })
      .eq('id', testModule.id);
    
    if (saveError) throw saveError;
    
    log('Conte√∫do salvo com sucesso');
    
    // 4. Aguardar um momento (simular delay do frontend)
    log('\n4Ô∏è‚É£ Aguardando processamento...');
    await new Promise(resolve => setTimeout(resolve, 200));
    
    // 5. Verificar se o conte√∫do foi persistido corretamente
    log('\n5Ô∏è‚É£ Verificando persist√™ncia...');
    const { data: updatedModule, error: fetchError } = await supabase
      .from('modules')
      .select('id, title, content_jsonb')
      .eq('id', testModule.id)
      .single();
    
    if (fetchError) throw fetchError;
    
    const persistedContent = updatedModule.content_jsonb?.html || '';
    
    log(`Conte√∫do persistido: ${persistedContent.substring(0, 100)}...`, 'debug');
    log(`Tamanho do conte√∫do persistido: ${persistedContent.length} caracteres`);
    
    // 6. Verificar se o conte√∫do estendido est√° presente
    log('\n6Ô∏è‚É£ Verificando integridade do conte√∫do...');
    
    const hasOriginalContent = persistedContent.includes(originalContent.replace(/<[^>]*>/g, '').substring(0, 50));
    const hasExtendedContent = persistedContent.includes('Conte√∫do Estendido pela IA');
    const hasExercise = persistedContent.includes('Exerc√≠cio Pr√°tico');
    
    log(`‚úì Cont√©m conte√∫do original: ${hasOriginalContent}`, hasOriginalContent ? 'success' : 'error');
    log(`‚úì Cont√©m conte√∫do estendido: ${hasExtendedContent}`, hasExtendedContent ? 'success' : 'error');
    log(`‚úì Cont√©m exerc√≠cio pr√°tico: ${hasExercise}`, hasExercise ? 'success' : 'error');
    
    // 7. Resultado final
    log('\n=== RESULTADO DO TESTE ===');
    
    if (hasOriginalContent && hasExtendedContent && hasExercise) {
      log('üéâ SUCESSO! A corre√ß√£o funcionou corretamente.', 'success');
      log('‚úÖ O conte√∫do estendido foi salvo e persistido adequadamente.', 'success');
    } else {
      log('‚ùå FALHA! Ainda h√° problemas com o salvamento.', 'error');
      
      if (!hasOriginalContent) {
        log('- Conte√∫do original foi perdido', 'error');
      }
      if (!hasExtendedContent) {
        log('- Conte√∫do estendido n√£o foi salvo', 'error');
      }
      if (!hasExercise) {
        log('- Partes espec√≠ficas do conte√∫do estendido foram perdidas', 'error');
      }
    }
    
    // 8. Restaurar conte√∫do original
    log('\n8Ô∏è‚É£ Restaurando conte√∫do original...');
    await supabase
      .from('modules')
      .update({ content_jsonb: { html: originalContent } })
      .eq('id', testModule.id);
    
    log('Conte√∫do original restaurado', 'success');
    
  } catch (error) {
    log(`Erro no teste: ${error.message}`, 'error');
    console.error(error);
  }
}

// Executar teste
testFix();