/**
 * Script de diagn√≥stico para problemas do AdminCourseEditor
 * Identifica problemas de sincroniza√ß√£o de conte√∫do e estado
 */

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function diagnoseEditorIssues() {
  console.log('üîç Iniciando diagn√≥stico dos problemas do AdminCourseEditor...');
  
  try {
    // 1. Verificar m√≥dulos com conte√∫do duplicado
    console.log('\nüìã 1. Verificando conte√∫do duplicado entre m√≥dulos...');
    const { data: modules, error: modulesError } = await supabase
      .from('modules')
      .select('id, title, course_id, order_index, content_jsonb')
      .order('course_id, order_index');
    
    if (modulesError) {
      console.error('‚ùå Erro ao buscar m√≥dulos:', modulesError);
      return;
    }
    
    // Agrupar por curso
    const modulesByCourse = modules.reduce((acc, module) => {
      if (!acc[module.course_id]) {
        acc[module.course_id] = [];
      }
      acc[module.course_id].push(module);
      return acc;
    }, {});
    
    let duplicateContentFound = false;
    
    for (const [courseId, courseModules] of Object.entries(modulesByCourse)) {
      console.log(`\nüìö Curso ${courseId}:`);
      
      // Verificar conte√∫do duplicado dentro do curso
      const contentMap = new Map();
      
      for (const module of courseModules) {
        const content = module.content_jsonb?.html || '';
        const contentHash = content.trim();
        
        if (contentHash && contentMap.has(contentHash)) {
          console.log(`‚ö†Ô∏è  CONTE√öDO DUPLICADO ENCONTRADO:`);
          console.log(`   M√≥dulo 1: ${contentMap.get(contentHash).title} (ID: ${contentMap.get(contentHash).id})`);
          console.log(`   M√≥dulo 2: ${module.title} (ID: ${module.id})`);
          console.log(`   Conte√∫do: ${contentHash.substring(0, 100)}...`);
          duplicateContentFound = true;
        } else if (contentHash) {
          contentMap.set(contentHash, module);
        }
        
        console.log(`   üìÑ ${module.title} (#${module.order_index}) - ${content.length} chars`);
      }
    }
    
    if (!duplicateContentFound) {
      console.log('‚úÖ Nenhum conte√∫do duplicado encontrado');
    }
    
    // 2. Verificar m√≥dulos com conte√∫do vazio ou inv√°lido
    console.log('\nüìã 2. Verificando m√≥dulos com problemas de conte√∫do...');
    
    const problematicModules = modules.filter(module => {
      const content = module.content_jsonb?.html || '';
      return (
        !content || 
        content.trim() === '' || 
        content === '<p></p>' ||
        content.includes('undefined') ||
        content.includes('null')
      );
    });
    
    if (problematicModules.length > 0) {
      console.log(`‚ö†Ô∏è  ${problematicModules.length} m√≥dulos com problemas de conte√∫do:`);
      problematicModules.forEach(module => {
        console.log(`   - ${module.title} (ID: ${module.id}) - Conte√∫do: "${module.content_jsonb?.html || 'VAZIO'}"`);        
      });
    } else {
      console.log('‚úÖ Todos os m√≥dulos t√™m conte√∫do v√°lido');
    }
    
    // 3. Verificar estrutura do content_jsonb
    console.log('\nüìã 3. Verificando estrutura do content_jsonb...');
    
    const invalidStructures = modules.filter(module => {
      const content = module.content_jsonb;
      return (
        !content ||
        typeof content !== 'object' ||
        !content.hasOwnProperty('html')
      );
    });
    
    if (invalidStructures.length > 0) {
      console.log(`‚ö†Ô∏è  ${invalidStructures.length} m√≥dulos com estrutura inv√°lida:`);
      invalidStructures.forEach(module => {
        console.log(`   - ${module.title} (ID: ${module.id}) - Estrutura: ${JSON.stringify(module.content_jsonb)}`);
      });
    } else {
      console.log('‚úÖ Todas as estruturas content_jsonb s√£o v√°lidas');
    }
    
    // 4. Verificar m√≥dulos √≥rf√£os (sem curso)
    console.log('\nüìã 4. Verificando m√≥dulos √≥rf√£os...');
    
    const { data: courses, error: coursesError } = await supabase
      .from('courses')
      .select('id');
    
    if (coursesError) {
      console.error('‚ùå Erro ao buscar cursos:', coursesError);
      return;
    }
    
    const courseIds = new Set(courses.map(c => c.id));
    const orphanModules = modules.filter(module => !courseIds.has(module.course_id));
    
    if (orphanModules.length > 0) {
      console.log(`‚ö†Ô∏è  ${orphanModules.length} m√≥dulos √≥rf√£os encontrados:`);
      orphanModules.forEach(module => {
        console.log(`   - ${module.title} (ID: ${module.id}) - Curso inexistente: ${module.course_id}`);
      });
    } else {
      console.log('‚úÖ Nenhum m√≥dulo √≥rf√£o encontrado');
    }
    
    // 5. Verificar ordem dos m√≥dulos
    console.log('\nüìã 5. Verificando ordem dos m√≥dulos...');
    
    let orderIssues = false;
    
    for (const [courseId, courseModules] of Object.entries(modulesByCourse)) {
      const sortedModules = courseModules.sort((a, b) => a.order_index - b.order_index);
      
      // Verificar se h√° gaps ou duplicatas na ordem
      for (let i = 0; i < sortedModules.length; i++) {
        const expectedIndex = i;
        const actualIndex = sortedModules[i].order_index;
        
        if (actualIndex !== expectedIndex) {
          console.log(`‚ö†Ô∏è  Problema de ordem no curso ${courseId}:`);
          console.log(`   M√≥dulo "${sortedModules[i].title}" tem order_index ${actualIndex}, esperado ${expectedIndex}`);
          orderIssues = true;
        }
      }
    }
    
    if (!orderIssues) {
      console.log('‚úÖ Ordem dos m√≥dulos est√° correta');
    }
    
    // 6. Gerar relat√≥rio de resumo
    console.log('\nüìä RESUMO DO DIAGN√ìSTICO:');
    console.log(`   Total de m√≥dulos: ${modules.length}`);
    console.log(`   Total de cursos: ${Object.keys(modulesByCourse).length}`);
    console.log(`   M√≥dulos com problemas de conte√∫do: ${problematicModules.length}`);
    console.log(`   M√≥dulos com estrutura inv√°lida: ${invalidStructures.length}`);
    console.log(`   M√≥dulos √≥rf√£os: ${orphanModules.length}`);
    console.log(`   Conte√∫do duplicado: ${duplicateContentFound ? 'SIM' : 'N√ÉO'}`);
    console.log(`   Problemas de ordem: ${orderIssues ? 'SIM' : 'N√ÉO'}`);
    
    // Salvar relat√≥rio detalhado
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalModules: modules.length,
        totalCourses: Object.keys(modulesByCourse).length,
        problematicModules: problematicModules.length,
        invalidStructures: invalidStructures.length,
        orphanModules: orphanModules.length,
        duplicateContent: duplicateContentFound,
        orderIssues: orderIssues
      },
      details: {
        problematicModules,
        invalidStructures,
        orphanModules
      }
    };
    
    const fs = require('fs');
    const reportPath = './scripts/editor-diagnosis-report.json';
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`\nüìÑ Relat√≥rio detalhado salvo em: ${reportPath}`);
    
  } catch (error) {
    console.error('‚ùå Erro durante o diagn√≥stico:', error);
  }
}

// Executar diagn√≥stico
diagnoseEditorIssues().then(() => {
  console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Erro fatal:', error);
  process.exit(1);
});