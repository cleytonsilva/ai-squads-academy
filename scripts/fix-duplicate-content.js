/**
 * Script para corrigir conte√∫do duplicado dos m√≥dulos
 * Gera conte√∫do espec√≠fico para cada m√≥dulo 'Prova Final' baseado no curso
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// Carregar vari√°veis de ambiente
config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * Conte√∫do espec√≠fico para cada curso
 */
const courseSpecificContent = {
  'Curso de Ciberseguran√ßa': {
    title: 'Avalia√ß√£o Final - Ciberseguran√ßa',
    content: `
      <h2>Avalia√ß√£o Final - Ciberseguran√ßa</h2>
      <p>Parab√©ns por chegar at√© aqui! Esta √© sua avalia√ß√£o final do curso de Ciberseguran√ßa.</p>
      
      <h3>üìã Instru√ß√µes da Prova</h3>
      <ul>
        <li>Esta avalia√ß√£o cont√©m quest√µes sobre todos os m√≥dulos estudados</li>
        <li>Voc√™ ter√° tempo suficiente para responder com calma</li>
        <li>Leia cada quest√£o com aten√ß√£o antes de responder</li>
        <li>√â necess√°rio obter pelo menos 70% de acertos para aprova√ß√£o</li>
      </ul>
      
      <h3>üéØ Temas Abordados</h3>
      <ul>
        <li><strong>Introdu√ß√£o √† Ciberseguran√ßa:</strong> Conceitos fundamentais e import√¢ncia</li>
        <li><strong>Tipos de Amea√ßas:</strong> Malware, phishing, ataques DDoS e outros</li>
        <li><strong>Pr√°ticas de Prote√ß√£o:</strong> Senhas seguras, autentica√ß√£o e criptografia</li>
        <li><strong>Seguran√ßa em Redes:</strong> Firewalls, VPNs e monitoramento</li>
        <li><strong>Legisla√ß√£o e Compliance:</strong> LGPD, GDPR e normas de seguran√ßa</li>
        <li><strong>Resposta a Incidentes:</strong> Detec√ß√£o, conten√ß√£o e recupera√ß√£o</li>
        <li><strong>Futuro da Ciberseguran√ßa:</strong> Tend√™ncias e tecnologias emergentes</li>
      </ul>
      
      <h3>‚úÖ Ap√≥s a Conclus√£o</h3>
      <p>Ao finalizar esta avalia√ß√£o com sucesso, voc√™ receber√°:</p>
      <ul>
        <li>Certificado de conclus√£o do curso</li>
        <li>Badge de especialista em Ciberseguran√ßa</li>
        <li>Acesso a materiais complementares</li>
      </ul>
      
      <div style="background-color: #f0f9ff; padding: 15px; border-radius: 8px; margin: 20px 0;">
        <p><strong>üí° Dica:</strong> Revise os conceitos principais de cada m√≥dulo antes de iniciar a prova. Boa sorte!</p>
      </div>
    `
  },
  'Blue Team Fundamentos': {
    title: 'Avalia√ß√£o Final - Blue Team',
    content: `
      <h2>Avalia√ß√£o Final - Blue Team Fundamentos</h2>
      <p>Chegou o momento de demonstrar seus conhecimentos em Blue Team! Esta avalia√ß√£o final testar√° sua compreens√£o dos conceitos fundamentais de defesa cibern√©tica.</p>
      
      <h3>üìã Instru√ß√µes da Prova</h3>
      <ul>
        <li>Avalia√ß√£o abrangente sobre todos os m√≥dulos do curso</li>
        <li>Quest√µes pr√°ticas e te√≥ricas sobre Blue Team</li>
        <li>Tempo recomendado: 60-90 minutos</li>
        <li>Nota m√≠nima para aprova√ß√£o: 70%</li>
      </ul>
      
      <h3>üõ°Ô∏è √Åreas de Conhecimento Avaliadas</h3>
      <ul>
        <li><strong>Introdu√ß√£o ao Blue Team:</strong> Papel e responsabilidades da equipe defensiva</li>
        <li><strong>Fundamentos de Seguran√ßa:</strong> Princ√≠pios CIA, controles de seguran√ßa</li>
        <li><strong>An√°lise de Risco:</strong> Identifica√ß√£o, avalia√ß√£o e mitiga√ß√£o de riscos</li>
        <li><strong>Monitoramento e Resposta:</strong> SOC, SIEM e procedimentos de resposta</li>
        <li><strong>Ferramentas de Seguran√ßa:</strong> IDS/IPS, antiv√≠rus, an√°lise forense</li>
        <li><strong>Pol√≠ticas de Seguran√ßa:</strong> Desenvolvimento e implementa√ß√£o</li>
        <li><strong>Treinamento e Conscientiza√ß√£o:</strong> Educa√ß√£o em seguran√ßa</li>
      </ul>
      
      <h3>üéñÔ∏è Compet√™ncias Blue Team</h3>
      <p>Esta avalia√ß√£o verificar√° sua capacidade de:</p>
      <ul>
        <li>Identificar e analisar amea√ßas de seguran√ßa</li>
        <li>Implementar controles defensivos eficazes</li>
        <li>Responder adequadamente a incidentes de seguran√ßa</li>
        <li>Utilizar ferramentas de monitoramento e an√°lise</li>
        <li>Desenvolver estrat√©gias de defesa em profundidade</li>
      </ul>
      
      <h3>üèÜ Certifica√ß√£o</h3>
      <p>Ao ser aprovado, voc√™ receber√°:</p>
      <ul>
        <li>Certificado Blue Team Fundamentos</li>
        <li>Badge de Analista de Seguran√ßa</li>
        <li>Recomenda√ß√µes para pr√≥ximos passos na carreira</li>
      </ul>
      
      <div style="background-color: #f0fdf4; padding: 15px; border-radius: 8px; margin: 20px 0;">
        <p><strong>üéØ Estrat√©gia:</strong> Pense como um defensor! Considere sempre a perspectiva de prote√ß√£o e monitoramento ao responder as quest√µes.</p>
      </div>
    `
  }
};

/**
 * Fun√ß√£o principal para corrigir conte√∫do duplicado
 */
async function fixDuplicateContent() {
  console.log('üîß Iniciando corre√ß√£o de conte√∫do duplicado...');
  
  try {
    // Buscar os m√≥dulos com conte√∫do duplicado
    const { data: duplicateModules, error } = await supabase
      .from('modules')
      .select(`
        id,
        title,
        content_jsonb,
        course_id,
        courses!inner(
          id,
          title
        )
      `)
      .eq('title', 'Prova Final')
      .in('id', [
        '4061b636-3e2e-418b-81be-10b5b3b1c8ba', // Curso de Ciberseguran√ßa
        'a313a0d4-d1e6-4617-bef8-cf1b2aa4d702'  // Blue Team Fundamentos
      ]);
    
    if (error) {
      throw new Error(`Erro ao buscar m√≥dulos duplicados: ${error.message}`);
    }
    
    console.log(`üìñ Encontrados ${duplicateModules.length} m√≥dulos para corre√ß√£o`);
    
    // Corrigir cada m√≥dulo
    for (const module of duplicateModules) {
      const courseTitle = module.courses.title;
      const specificContent = courseSpecificContent[courseTitle];
      
      if (!specificContent) {
        console.warn(`‚ö†Ô∏è  Conte√∫do espec√≠fico n√£o encontrado para o curso: ${courseTitle}`);
        continue;
      }
      
      console.log(`\nüîÑ Atualizando m√≥dulo: ${courseTitle} > ${module.title}`);
      console.log(`   ID: ${module.id}`);
      
      // Criar backup do conte√∫do original
      const backupData = {
        moduleId: module.id,
        originalTitle: module.title,
        originalContent: module.content_jsonb,
        courseTitle: courseTitle,
        timestamp: new Date().toISOString()
      };
      
      // Salvar backup
      const backupPath = `./scripts/backup-module-${module.id}.json`;
      const fs = await import('fs');
      fs.writeFileSync(backupPath, JSON.stringify(backupData, null, 2));
      console.log(`   üíæ Backup salvo: ${backupPath}`);
      
      // Atualizar conte√∫do do m√≥dulo
      const newContent = {
        html: specificContent.content.trim(),
        summary: `Avalia√ß√£o final do curso ${courseTitle}`,
        lastUpdated: new Date().toISOString(),
        migrationNote: 'Conte√∫do atualizado para corrigir duplica√ß√£o - migra√ß√£o TinyMCE para Tiptap'
      };
      
      const { error: updateError } = await supabase
        .from('modules')
        .update({
          title: specificContent.title,
          content_jsonb: newContent,
          updated_at: new Date().toISOString()
        })
        .eq('id', module.id);
      
      if (updateError) {
        console.error(`‚ùå Erro ao atualizar m√≥dulo ${module.id}:`, updateError.message);
        continue;
      }
      
      console.log(`   ‚úÖ M√≥dulo atualizado com sucesso`);
      console.log(`   üìù Novo t√≠tulo: ${specificContent.title}`);
      console.log(`   üìÑ Conte√∫do: ${newContent.html.length} caracteres`);
    }
    
    console.log('\nüéâ Corre√ß√£o de conte√∫do duplicado conclu√≠da!');
    
    // Verificar se a corre√ß√£o foi bem-sucedida
    await verifyFix();
    
  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error.message);
    process.exit(1);
  }
}

/**
 * Verifica se a corre√ß√£o foi aplicada corretamente
 */
async function verifyFix() {
  console.log('\nüîç Verificando se a corre√ß√£o foi aplicada...');
  
  try {
    const { data: modules, error } = await supabase
      .from('modules')
      .select(`
        id,
        title,
        content_jsonb,
        courses!inner(
          title
        )
      `)
      .in('id', [
        '4061b636-3e2e-418b-81be-10b5b3b1c8ba',
        'a313a0d4-d1e6-4617-bef8-cf1b2aa4d702'
      ]);
    
    if (error) {
      throw new Error(`Erro na verifica√ß√£o: ${error.message}`);
    }
    
    console.log('\nüìä RESULTADO DA VERIFICA√á√ÉO:');
    modules.forEach(module => {
      const contentLength = module.content_jsonb?.html?.length || 0;
      console.log(`\n   üìñ ${module.courses.title}:`);
      console.log(`      T√≠tulo: ${module.title}`);
      console.log(`      Conte√∫do: ${contentLength} caracteres`);
      console.log(`      Status: ${contentLength > 100 ? '‚úÖ Corrigido' : '‚ö†Ô∏è  Ainda gen√©rico'}`);
    });
    
    // Verificar se ainda h√° duplica√ß√£o
    const contents = modules.map(m => JSON.stringify(m.content_jsonb));
    const hasDuplication = contents.length !== new Set(contents).size;
    
    console.log(`\nüîÑ Duplica√ß√£o: ${hasDuplication ? '‚ùå Ainda existe' : '‚úÖ Corrigida'}`);
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error.message);
  }
}

// Executar corre√ß√£o
fixDuplicateContent().catch(console.error);