/**
 * Script de Teste Frontend - Extens√£o de M√≥dulo
 * 
 * Este script testa especificamente o comportamento do frontend
 * simulando as intera√ß√µes do usu√°rio no AdminCourseEditor.
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

/**
 * Simular o estado do componente AdminCourseEditor
 */
class MockAdminCourseEditor {
  constructor() {
    this.moduleHtml = '';
    this.moduleTitle = '';
    this.selectedModuleId = null;
  }

  /**
   * Simular a fun√ß√£o getHtml do AdminCourseEditor
   */
  getHtml(payload) {
    try {
      if (payload && typeof payload === 'object' && payload !== null && 'html' in payload) {
        return payload.html || '';
      }
      return typeof payload === 'string' ? payload : '';
    } catch {
      return '';
    }
  }

  /**
   * Simular handleSelectModule
   */
  handleSelectModule(module) {
    console.log(`üìã Selecionando m√≥dulo: ${module.title}`);
    this.selectedModuleId = module.id;
    this.moduleTitle = module.title;
    this.moduleHtml = this.getHtml(module.content_jsonb);
    
    console.log(`üîç Estado ap√≥s sele√ß√£o:`);
    console.log(`   - moduleHtml: ${this.moduleHtml}`);
    console.log(`   - moduleTitle: ${this.moduleTitle}`);
    console.log(`   - selectedModuleId: ${this.selectedModuleId}`);
  }

  /**
   * Simular o callback onExtended do AIModuleExtendDialog
   */
  onExtended(extendedHtml) {
    console.log(`ü§ñ Extens√£o com IA recebida: ${extendedHtml}`);
    
    // Esta √© a linha cr√≠tica que pode estar causando o problema
    const previousHtml = this.moduleHtml;
    this.moduleHtml = `${previousHtml}\n${extendedHtml}`;
    
    console.log(`üîç Estado ap√≥s extens√£o:`);
    console.log(`   - HTML anterior: ${previousHtml}`);
    console.log(`   - HTML estendido: ${extendedHtml}`);
    console.log(`   - HTML combinado: ${this.moduleHtml}`);
    
    return this.moduleHtml;
  }

  /**
   * Simular handleSaveModule
   */
  async handleSaveModule() {
    if (!this.selectedModuleId) {
      console.error('‚ùå Nenhum m√≥dulo selecionado');
      return false;
    }

    console.log(`üíæ Salvando m√≥dulo...`);
    console.log(`   - ID: ${this.selectedModuleId}`);
    console.log(`   - T√≠tulo: ${this.moduleTitle}`);
    console.log(`   - HTML: ${this.moduleHtml}`);

    try {
      const { error } = await supabase
        .from('modules')
        .update({ 
          title: this.moduleTitle, 
          content_jsonb: { html: this.moduleHtml } 
        })
        .eq('id', this.selectedModuleId);

      if (error) throw error;

      console.log('‚úÖ M√≥dulo salvo com sucesso');
      return true;
    } catch (error) {
      console.error(`‚ùå Erro ao salvar m√≥dulo: ${error.message}`);
      return false;
    }
  }

  /**
   * Simular refetch ap√≥s salvamento
   */
  async refetch() {
    console.log('üîÑ Simulando refetch dos dados...');
    
    try {
      const { data: module, error } = await supabase
        .from('modules')
        .select('id, title, content_jsonb')
        .eq('id', this.selectedModuleId)
        .single();

      if (error) throw error;

      // Simular o que acontece no useEffect quando os dados s√£o atualizados
      this.handleSelectModule(module);
      
      return module;
    } catch (error) {
      console.error(`‚ùå Erro no refetch: ${error.message}`);
      return null;
    }
  }
}

/**
 * Teste principal
 */
async function testFrontendFlow() {
  console.log('üöÄ Iniciando teste do fluxo frontend\n');

  try {
    // 1. Buscar um m√≥dulo existente
    console.log('1Ô∏è‚É£ Buscando m√≥dulo para teste...');
    const { data: modules, error } = await supabase
      .from('modules')
      .select('id, title, content_jsonb')
      .limit(1);

    if (error) throw error;
    if (!modules || modules.length === 0) {
      throw new Error('Nenhum m√≥dulo encontrado');
    }

    const testModule = modules[0];
    console.log(`‚úÖ M√≥dulo encontrado: ${testModule.title}\n`);

    // 2. Criar inst√¢ncia do mock editor
    const editor = new MockAdminCourseEditor();

    // 3. Simular sele√ß√£o do m√≥dulo
    console.log('2Ô∏è‚É£ Simulando sele√ß√£o do m√≥dulo...');
    editor.handleSelectModule(testModule);
    console.log('');

    // 4. Simular extens√£o com IA
    console.log('3Ô∏è‚É£ Simulando extens√£o com IA...');
    const extendedContent = '<p>Conte√∫do adicional gerado pela IA para teste.</p>';
    const combinedHtml = editor.onExtended(extendedContent);
    console.log('');

    // 5. Simular salvamento
    console.log('4Ô∏è‚É£ Simulando salvamento...');
    const saveSuccess = await editor.handleSaveModule();
    
    if (!saveSuccess) {
      console.error('‚ùå Falha no salvamento. Abortando teste.');
      return;
    }
    console.log('');

    // 6. Simular refetch (como acontece ap√≥s salvamento)
    console.log('5Ô∏è‚É£ Simulando refetch ap√≥s salvamento...');
    const refetchedModule = await editor.refetch();
    
    if (!refetchedModule) {
      console.error('‚ùå Falha no refetch. Abortando teste.');
      return;
    }
    console.log('');

    // 7. Verificar se o conte√∫do foi preservado
    console.log('6Ô∏è‚É£ Verificando preserva√ß√£o do conte√∫do...');
    const finalHtml = editor.moduleHtml;
    
    console.log(`üîç An√°lise final:`);
    console.log(`   - HTML combinado original: ${combinedHtml}`);
    console.log(`   - HTML ap√≥s refetch: ${finalHtml}`);
    
    const contentPreserved = finalHtml.includes(extendedContent.replace(/<[^>]*>/g, '').trim());
    
    if (contentPreserved) {
      console.log('‚úÖ Conte√∫do estendido foi preservado corretamente!');
    } else {
      console.log('‚ùå Conte√∫do estendido foi perdido!');
      
      // An√°lise detalhada
      console.log('\nüîç AN√ÅLISE DETALHADA:');
      console.log('- Verificar se o problema est√° na concatena√ß√£o do estado');
      console.log('- Verificar se o problema est√° no salvamento no banco');
      console.log('- Verificar se o problema est√° na recupera√ß√£o dos dados');
      console.log('- Verificar se h√° problemas de timing/race conditions');
    }

    // 8. Restaurar conte√∫do original
    console.log('\n7Ô∏è‚É£ Restaurando conte√∫do original...');
    await supabase
      .from('modules')
      .update({ content_jsonb: testModule.content_jsonb })
      .eq('id', testModule.id);
    
    console.log('‚úÖ Conte√∫do original restaurado');

  } catch (error) {
    console.error(`‚ùå Erro no teste: ${error.message}`);
    console.error(error);
  }

  console.log('\nüèÅ Teste conclu√≠do');
}

// Executar teste
testFrontendFlow();