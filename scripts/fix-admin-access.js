/**
 * Script para verificar e corrigir permiss√µes administrativas
 * Foco: Restaurar acesso admin para cleyton7silva@gmail.com
 * 
 * Este script:
 * 1. Verifica se o usu√°rio existe na tabela auth.users
 * 2. Verifica se existe perfil na tabela profiles
 * 3. Verifica a role atual do usu√°rio
 * 4. Corrige a role para 'admin' se necess√°rio
 * 5. Testa o redirecionamento ap√≥s login
 * 6. Fornece relat√≥rio detalhado do status
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const TARGET_EMAIL = 'cleyton7silva@gmail.com';

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
  console.error('   Necess√°rio: VITE_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

// Cliente com service role para opera√ß√µes administrativas
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

class AdminAccessFixer {
  constructor() {
    this.results = [];
    this.fixes = [];
    this.userAuthData = null;
    this.userProfile = null;
  }

  /**
   * Adiciona resultado de verifica√ß√£o
   */
  addResult(check, status, message, data = null) {
    const result = {
      check,
      status, // 'success', 'error', 'warning', 'info'
      message,
      data,
      timestamp: new Date().toISOString()
    };
    
    this.results.push(result);
    
    const icons = {
      success: '‚úÖ',
      error: '‚ùå',
      warning: '‚ö†Ô∏è',
      info: '‚ÑπÔ∏è'
    };
    
    console.log(`${icons[status]} ${check}: ${message}`);
    
    if (data && typeof data === 'object') {
      console.log(`   Dados:`, JSON.stringify(data, null, 2));
    } else if (data) {
      console.log(`   Detalhes: ${data}`);
    }
  }

  /**
   * Adiciona corre√ß√£o aplicada
   */
  addFix(action, description, success = true) {
    const fix = {
      action,
      description,
      success,
      timestamp: new Date().toISOString()
    };
    
    this.fixes.push(fix);
    
    const icon = success ? 'üîß' : '‚ùå';
    console.log(`${icon} CORRE√á√ÉO: ${description}`);
  }

  /**
   * Verifica se o usu√°rio existe na tabela auth.users
   */
  async checkAuthUser() {
    try {
      console.log('\nüîç Verificando usu√°rio na tabela auth.users...');
      
      const { data: users, error } = await supabase.auth.admin.listUsers();
      
      if (error) {
        this.addResult(
          'Auth User Check',
          'error',
          `Erro ao listar usu√°rios: ${error.message}`,
          error
        );
        return false;
      }
      
      const targetUser = users.users.find(user => user.email === TARGET_EMAIL);
      
      if (!targetUser) {
        this.addResult(
          'Auth User Check',
          'error',
          `Usu√°rio ${TARGET_EMAIL} n√£o encontrado na tabela auth.users`,
          null
        );
        return false;
      }
      
      this.userAuthData = targetUser;
      
      this.addResult(
        'Auth User Check',
        'success',
        `Usu√°rio encontrado na tabela auth.users`,
        {
          id: targetUser.id,
          email: targetUser.email,
          created_at: targetUser.created_at,
          last_sign_in_at: targetUser.last_sign_in_at,
          email_confirmed_at: targetUser.email_confirmed_at
        }
      );
      
      return true;
    } catch (error) {
      this.addResult(
        'Auth User Check',
        'error',
        `Erro inesperado: ${error.message}`,
        error
      );
      return false;
    }
  }

  /**
   * Verifica se existe perfil na tabela profiles
   */
  async checkUserProfile() {
    try {
      console.log('\nüîç Verificando perfil na tabela profiles...');
      
      if (!this.userAuthData) {
        this.addResult(
          'Profile Check',
          'error',
          'Dados do usu√°rio auth n√£o dispon√≠veis',
          null
        );
        return false;
      }
      
      const { data: profile, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('user_id', this.userAuthData.id)
        .single();
      
      if (error) {
        if (error.code === 'PGRST116') {
          this.addResult(
            'Profile Check',
            'warning',
            'Perfil n√£o encontrado na tabela profiles',
            null
          );
          return false;
        }
        
        this.addResult(
          'Profile Check',
          'error',
          `Erro ao buscar perfil: ${error.message}`,
          error
        );
        return false;
      }
      
      this.userProfile = profile;
      
      this.addResult(
        'Profile Check',
        'success',
        'Perfil encontrado na tabela profiles',
        {
          user_id: profile.user_id,
          name: profile.name,
          email: profile.email,
          role: profile.role,
          created_at: profile.created_at,
          updated_at: profile.updated_at
        }
      );
      
      return true;
    } catch (error) {
      this.addResult(
        'Profile Check',
        'error',
        `Erro inesperado: ${error.message}`,
        error
      );
      return false;
    }
  }

  /**
   * Verifica a role atual do usu√°rio
   */
  async checkUserRole() {
    try {
      console.log('\nüîç Verificando role do usu√°rio...');
      
      if (!this.userProfile) {
        this.addResult(
          'Role Check',
          'error',
          'Perfil do usu√°rio n√£o dispon√≠vel',
          null
        );
        return false;
      }
      
      const currentRole = this.userProfile.role;
      
      if (currentRole === 'admin') {
        this.addResult(
          'Role Check',
          'success',
          'Usu√°rio j√° possui role de administrador',
          { current_role: currentRole }
        );
        return true;
      }
      
      this.addResult(
        'Role Check',
        'warning',
        `Usu√°rio possui role incorreta: ${currentRole}`,
        { current_role: currentRole, expected_role: 'admin' }
      );
      
      return false;
    } catch (error) {
      this.addResult(
        'Role Check',
        'error',
        `Erro inesperado: ${error.message}`,
        error
      );
      return false;
    }
  }

  /**
   * Cria perfil se n√£o existir
   */
  async createProfileIfMissing() {
    try {
      if (this.userProfile) {
        return true; // Perfil j√° existe
      }
      
      console.log('\nüîß Criando perfil para o usu√°rio...');
      
      const { data: newProfile, error } = await supabase
        .from('profiles')
        .insert({
          user_id: this.userAuthData.id,
          name: this.userAuthData.user_metadata?.name || 'Cleyton Silva',
          display_name: this.userAuthData.user_metadata?.display_name || 'Cleyton Silva',
          email: this.userAuthData.email,
          role: 'admin',
          xp: 0,
          profile_data: {}
        })
        .select()
        .single();
      
      if (error) {
        this.addResult(
          'Create Profile',
          'error',
          `Erro ao criar perfil: ${error.message}`,
          error
        );
        this.addFix('create_profile', 'Tentativa de criar perfil', false);
        return false;
      }
      
      this.userProfile = newProfile;
      
      this.addResult(
        'Create Profile',
        'success',
        'Perfil criado com sucesso',
        newProfile
      );
      
      this.addFix('create_profile', 'Perfil criado com role admin', true);
      return true;
    } catch (error) {
      this.addResult(
        'Create Profile',
        'error',
        `Erro inesperado: ${error.message}`,
        error
      );
      this.addFix('create_profile', 'Falha ao criar perfil', false);
      return false;
    }
  }

  /**
   * Corrige a role para admin
   */
  async fixUserRole() {
    try {
      if (!this.userProfile) {
        this.addResult(
          'Fix Role',
          'error',
          'Perfil do usu√°rio n√£o dispon√≠vel para corre√ß√£o',
          null
        );
        return false;
      }
      
      if (this.userProfile.role === 'admin') {
        return true; // J√° √© admin
      }
      
      console.log('\nüîß Corrigindo role do usu√°rio para admin...');
      
      const { data: updatedProfile, error } = await supabase
        .from('profiles')
        .update({ role: 'admin' })
        .eq('user_id', this.userAuthData.id)
        .select()
        .single();
      
      if (error) {
        this.addResult(
          'Fix Role',
          'error',
          `Erro ao atualizar role: ${error.message}`,
          error
        );
        this.addFix('fix_role', 'Tentativa de corrigir role para admin', false);
        return false;
      }
      
      this.userProfile = updatedProfile;
      
      this.addResult(
        'Fix Role',
        'success',
        'Role corrigida para admin com sucesso',
        { old_role: this.userProfile.role, new_role: 'admin' }
      );
      
      this.addFix('fix_role', 'Role alterada de student/instructor para admin', true);
      return true;
    } catch (error) {
      this.addResult(
        'Fix Role',
        'error',
        `Erro inesperado: ${error.message}`,
        error
      );
      this.addFix('fix_role', 'Falha ao corrigir role', false);
      return false;
    }
  }

  /**
   * Testa o redirecionamento simulando login
   */
  async testRedirection() {
    try {
      console.log('\nüîç Testando l√≥gica de redirecionamento...');
      
      if (!this.userProfile) {
        this.addResult(
          'Redirection Test',
          'error',
          'Perfil n√£o dispon√≠vel para teste',
          null
        );
        return false;
      }
      
      const role = this.userProfile.role;
      let expectedRoute;
      
      if (role === 'admin' || role === 'instructor') {
        expectedRoute = '/admin';
      } else {
        expectedRoute = '/app';
      }
      
      this.addResult(
        'Redirection Test',
        'info',
        `Com role '${role}', usu√°rio deve ser redirecionado para: ${expectedRoute}`,
        { role, expected_route: expectedRoute }
      );
      
      // Verificar se a l√≥gica est√° correta
      if (role === 'admin' && expectedRoute === '/admin') {
        this.addResult(
          'Redirection Logic',
          'success',
          'L√≥gica de redirecionamento est√° correta para admin',
          null
        );
        return true;
      } else {
        this.addResult(
          'Redirection Logic',
          'warning',
          'Verificar l√≥gica de redirecionamento no useAuth.ts',
          null
        );
        return false;
      }
    } catch (error) {
      this.addResult(
        'Redirection Test',
        'error',
        `Erro inesperado: ${error.message}`,
        error
      );
      return false;
    }
  }

  /**
   * Verifica outros usu√°rios admin
   */
  async checkOtherAdmins() {
    try {
      console.log('\nüîç Verificando outros usu√°rios admin...');
      
      const { data: adminProfiles, error } = await supabase
        .from('profiles')
        .select('user_id, name, email, role, created_at')
        .eq('role', 'admin')
        .limit(10);
      
      if (error) {
        this.addResult(
          'Other Admins',
          'error',
          `Erro ao buscar outros admins: ${error.message}`,
          error
        );
        return false;
      }
      
      this.addResult(
        'Other Admins',
        'info',
        `Encontrados ${adminProfiles.length} usu√°rios com role admin`,
        adminProfiles
      );
      
      return true;
    } catch (error) {
      this.addResult(
        'Other Admins',
        'error',
        `Erro inesperado: ${error.message}`,
        error
      );
      return false;
    }
  }

  /**
   * Gera relat√≥rio final
   */
  generateReport() {
    console.log('\n' + '='.repeat(80));
    console.log('üìä RELAT√ìRIO DE CORRE√á√ÉO DE ACESSO ADMINISTRATIVO');
    console.log('='.repeat(80));
    console.log(`üéØ Usu√°rio alvo: ${TARGET_EMAIL}`);
    console.log(`‚è∞ Data/Hora: ${new Date().toLocaleString('pt-BR')}`);
    
    console.log('\nüìã RESUMO DOS RESULTADOS:');
    const successCount = this.results.filter(r => r.status === 'success').length;
    const errorCount = this.results.filter(r => r.status === 'error').length;
    const warningCount = this.results.filter(r => r.status === 'warning').length;
    
    console.log(`   ‚úÖ Sucessos: ${successCount}`);
    console.log(`   ‚ùå Erros: ${errorCount}`);
    console.log(`   ‚ö†Ô∏è  Avisos: ${warningCount}`);
    
    console.log('\nüîß CORRE√á√ïES APLICADAS:');
    if (this.fixes.length === 0) {
      console.log('   Nenhuma corre√ß√£o foi necess√°ria');
    } else {
      this.fixes.forEach((fix, index) => {
        const icon = fix.success ? '‚úÖ' : '‚ùå';
        console.log(`   ${index + 1}. ${icon} ${fix.description}`);
      });
    }
    
    console.log('\nüë§ STATUS FINAL DO USU√ÅRIO:');
    if (this.userAuthData && this.userProfile) {
      console.log(`   üìß Email: ${this.userAuthData.email}`);
      console.log(`   üÜî ID: ${this.userAuthData.id}`);
      console.log(`   üë§ Nome: ${this.userProfile.name}`);
      console.log(`   üé≠ Role: ${this.userProfile.role}`);
      console.log(`   üìÖ Criado: ${new Date(this.userAuthData.created_at).toLocaleString('pt-BR')}`);
      
      if (this.userProfile.role === 'admin') {
        console.log('   ‚úÖ ACESSO ADMINISTRATIVO RESTAURADO!');
      } else {
        console.log('   ‚ùå Acesso administrativo ainda n√£o est√° correto');
      }
    } else {
      console.log('   ‚ùå Dados do usu√°rio n√£o dispon√≠veis');
    }
    
    console.log('\nüí° PR√ìXIMOS PASSOS:');
    if (this.userProfile?.role === 'admin') {
      console.log('   1. ‚úÖ Fa√ßa logout e login novamente no sistema');
      console.log('   2. ‚úÖ Voc√™ deve ser redirecionado para /admin');
      console.log('   3. ‚úÖ Verifique se o painel administrativo est√° funcionando');
    } else {
      console.log('   1. ‚ùå Verifique os erros acima');
      console.log('   2. ‚ùå Execute o script novamente se necess√°rio');
      console.log('   3. ‚ùå Contate o suporte t√©cnico se o problema persistir');
    }
    
    console.log('\nüîç VERIFICA√á√ÉO DE REDIRECIONAMENTO:');
    console.log('   - Se role = admin ‚Üí deve ir para /admin');
    console.log('   - Se role = student ‚Üí deve ir para /app');
    console.log('   - Verifique o arquivo src/hooks/useAuth.ts linhas 225-237');
    
    console.log('\n' + '='.repeat(80));
    
    return {
      success: this.userProfile?.role === 'admin',
      userFound: !!this.userAuthData,
      profileFound: !!this.userProfile,
      currentRole: this.userProfile?.role,
      fixesApplied: this.fixes.length,
      results: this.results,
      fixes: this.fixes
    };
  }

  /**
   * Executa todas as verifica√ß√µes e corre√ß√µes
   */
  async run() {
    try {
      console.log('üöÄ Iniciando corre√ß√£o de acesso administrativo...');
      console.log(`üéØ Usu√°rio alvo: ${TARGET_EMAIL}`);
      console.log(`üîó Supabase URL: ${SUPABASE_URL}`);
      
      // 1. Verificar usu√°rio auth
      const authUserExists = await this.checkAuthUser();
      if (!authUserExists) {
        console.log('\n‚ùå Usu√°rio n√£o encontrado. N√£o √© poss√≠vel continuar.');
        return this.generateReport();
      }
      
      // 2. Verificar perfil
      const profileExists = await this.checkUserProfile();
      
      // 3. Criar perfil se n√£o existir
      if (!profileExists) {
        await this.createProfileIfMissing();
      }
      
      // 4. Verificar role
      const roleCorrect = await this.checkUserRole();
      
      // 5. Corrigir role se necess√°rio
      if (!roleCorrect) {
        await this.fixUserRole();
      }
      
      // 6. Testar redirecionamento
      await this.testRedirection();
      
      // 7. Verificar outros admins
      await this.checkOtherAdmins();
      
      // 8. Gerar relat√≥rio
      return this.generateReport();
      
    } catch (error) {
      console.error('‚ùå Erro cr√≠tico durante execu√ß√£o:', error);
      this.addResult(
        'Critical Error',
        'error',
        `Erro cr√≠tico: ${error.message}`,
        error
      );
      return this.generateReport();
    }
  }
}

// Executar se chamado diretamente
if (process.argv[1] && process.argv[1].endsWith('fix-admin-access.js')) {
  const fixer = new AdminAccessFixer();
  fixer.run()
    .then((result) => {
      console.log('\n‚úÖ Execu√ß√£o conclu√≠da!');
      process.exit(result.success ? 0 : 1);
    })
    .catch((error) => {
      console.error('‚ùå Falha na execu√ß√£o:', error);
      process.exit(1);
    });
}

export default AdminAccessFixer;