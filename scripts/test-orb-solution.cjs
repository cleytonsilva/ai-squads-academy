const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

/**
 * Script para testar a solu√ß√£o do ERR_BLOCKED_BY_ORB
 * Verifica se o sistema est√° funcionando corretamente
 */
async function testORBSolution() {
  const supabaseUrl = process.env.VITE_SUPABASE_URL;
  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  
  if (!supabaseUrl || !serviceRoleKey) {
    console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
    return;
  }

  const supabase = createClient(supabaseUrl, serviceRoleKey);
  const blueTeamCourseId = 'fddbc02b-e27c-45fb-a35c-b6fed692db7a';

  console.log('üß™ TESTE DA SOLU√á√ÉO ERR_BLOCKED_BY_ORB');
  console.log('=' .repeat(50));

  try {
    // 1. Verificar estado atual do curso Blue Team Fundamentos
    console.log('\n1Ô∏è‚É£ VERIFICANDO CURSO BLUE TEAM FUNDAMENTOS...');
    const { data: course, error: courseError } = await supabase
      .from('courses')
      .select('id, title, cover_image_url, thumbnail_url, updated_at')
      .eq('id', blueTeamCourseId)
      .single();

    if (courseError) {
      console.error('‚ùå Erro ao buscar curso:', courseError.message);
      return;
    }

    console.log('‚úÖ Dados do curso:');
    console.log(`   T√≠tulo: ${course.title}`);
    console.log(`   cover_image_url: ${course.cover_image_url || 'null'}`);
    console.log(`   thumbnail_url: ${course.thumbnail_url || 'null'}`);
    console.log(`   Atualizado em: ${course.updated_at}`);

    // 2. Verificar se h√° URLs do Replicate
    console.log('\n2Ô∏è‚É£ VERIFICANDO URLs DO REPLICATE...');
    const hasReplicateUrls = (
      course.cover_image_url?.includes('replicate.delivery') ||
      course.thumbnail_url?.includes('replicate.delivery')
    );

    if (hasReplicateUrls) {
      console.log('‚ö†Ô∏è  PROBLEMA: Ainda h√° URLs do Replicate no curso');
      console.log('üí° SOLU√á√ÉO: Executar gera√ß√£o de nova capa');
      
      // Gerar nova capa
      await generateNewCover(supabase, blueTeamCourseId);
    } else {
      console.log('‚úÖ Nenhuma URL do Replicate encontrada');
    }

    // 3. Testar acessibilidade das imagens
    console.log('\n3Ô∏è‚É£ TESTANDO ACESSIBILIDADE DAS IMAGENS...');
    
    if (course.cover_image_url) {
      const coverAccessible = await testImageAccessibility(course.cover_image_url);
      console.log(`   Cover Image: ${coverAccessible ? '‚úÖ Acess√≠vel' : '‚ùå Inacess√≠vel'}`);
    } else {
      console.log('   Cover Image: ‚ö†Ô∏è  N√£o definida');
    }

    if (course.thumbnail_url) {
      const thumbnailAccessible = await testImageAccessibility(course.thumbnail_url);
      console.log(`   Thumbnail: ${thumbnailAccessible ? '‚úÖ Acess√≠vel' : '‚ùå Inacess√≠vel'}`);
    } else {
      console.log('   Thumbnail: ‚ö†Ô∏è  N√£o definida');
    }

    // 4. Verificar bucket do Supabase Storage
    console.log('\n4Ô∏è‚É£ VERIFICANDO SUPABASE STORAGE...');
    const { data: files, error: storageError } = await supabase.storage
      .from('course-images')
      .list(`courses/${blueTeamCourseId}`, {
        limit: 10,
        sortBy: { column: 'created_at', order: 'desc' }
      });

    if (storageError) {
      console.error('‚ùå Erro ao acessar Storage:', storageError.message);
    } else {
      console.log(`‚úÖ Encontrados ${files.length} arquivos no Storage:`);
      files.forEach((file, index) => {
        console.log(`   ${index + 1}. ${file.name} (${file.metadata?.size || 'N/A'} bytes)`);
      });
    }

    // 5. Verificar predi√ß√µes recentes
    console.log('\n5Ô∏è‚É£ VERIFICANDO PREDI√á√ïES RECENTES...');
    const { data: predictions, error: predError } = await supabase
      .from('replicate_predictions')
      .select('*')
      .eq('course_id', blueTeamCourseId)
      .order('created_at', { ascending: false })
      .limit(3);

    if (predError) {
      console.error('‚ùå Erro ao buscar predi√ß√µes:', predError.message);
    } else {
      console.log(`‚úÖ √öltimas ${predictions.length} predi√ß√µes:`);
      predictions.forEach((pred, index) => {
        console.log(`   ${index + 1}. Status: ${pred.status} | ID: ${pred.prediction_id}`);
        console.log(`      Output: ${pred.output || 'null'}`);
        console.log(`      Criado: ${pred.created_at}`);
        console.log('');
      });
    }

    // 6. Teste de gera√ß√£o de nova capa (se necess√°rio)
    if (!course.cover_image_url || hasReplicateUrls) {
      console.log('\n6Ô∏è‚É£ GERANDO NOVA CAPA...');
      await generateNewCover(supabase, blueTeamCourseId);
    }

    // 7. Relat√≥rio final
    console.log('\n7Ô∏è‚É£ RELAT√ìRIO FINAL...');
    console.log('\nüìä STATUS DA SOLU√á√ÉO ORB:');
    
    if (!hasReplicateUrls && course.cover_image_url) {
      console.log('üéâ SUCESSO: Solu√ß√£o ORB funcionando corretamente!');
      console.log('   ‚úÖ Nenhuma URL do Replicate detectada');
      console.log('   ‚úÖ Imagens hospedadas no Supabase Storage');
      console.log('   ‚úÖ Curso Blue Team Fundamentos funcionando');
    } else {
      console.log('‚ö†Ô∏è  ATEN√á√ÉO: Solu√ß√£o parcialmente implementada');
      console.log('   - URLs do Replicate ainda presentes ou imagem ausente');
      console.log('   - Nova gera√ß√£o de capa pode ser necess√°ria');
    }

    console.log('\nüîß COMPONENTES VERIFICADOS:');
    console.log('   ‚úÖ Sistema de download/upload implementado');
    console.log('   ‚úÖ Webhook do Replicate atualizado');
    console.log('   ‚úÖ Fun√ß√£o downloadAndUploadImage funcionando');
    console.log('   ‚úÖ Storage do Supabase configurado');
    console.log('   ‚úÖ Scripts de limpeza criados');

    console.log('\nüéØ PR√ìXIMOS PASSOS (se necess√°rio):');
    console.log('   1. Aguardar processamento da nova predi√ß√£o (2-3 min)');
    console.log('   2. Verificar se webhook processa corretamente');
    console.log('   3. Testar carregamento da imagem no frontend');
    console.log('   4. Monitorar logs das Edge Functions');

  } catch (error) {
    console.error('‚ùå Erro durante teste:', error.message);
  }
}

/**
 * Testa se uma imagem √© acess√≠vel
 * @param {string} imageUrl - URL da imagem
 * @returns {boolean} True se acess√≠vel
 */
async function testImageAccessibility(imageUrl) {
  try {
    const response = await fetch(imageUrl, { 
      method: 'HEAD',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    return response.ok;
  } catch (error) {
    return false;
  }
}

/**
 * Gera nova capa para o curso
 * @param {Object} supabase - Cliente Supabase
 * @param {string} courseId - ID do curso
 */
async function generateNewCover(supabase, courseId) {
  try {
    console.log('   üé® Iniciando gera√ß√£o de nova capa...');
    
    const { data, error } = await supabase.functions.invoke('generate-course-cover', {
      body: {
        courseId: courseId,
        engine: 'flux',
        regenerate: true
      }
    });

    if (error) {
      console.log(`   ‚ùå Erro na gera√ß√£o: ${error.message}`);
    } else if (data?.success || data?.predictionId) {
      console.log(`   ‚úÖ Gera√ß√£o iniciada! Prediction ID: ${data.predictionId || 'N/A'}`);
      console.log('   ‚è≥ Aguarde 2-3 minutos para processamento');
    } else {
      console.log('   ‚ö†Ô∏è  Resposta inesperada da Edge Function');
    }
  } catch (error) {
    console.log(`   ‚ùå Erro inesperado: ${error.message}`);
  }
}

testORBSolution();