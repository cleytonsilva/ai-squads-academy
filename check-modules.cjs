const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkModules() {
  try {
    console.log('üîç Verificando m√≥dulos no banco de dados...');
    
    const { data: modules, error } = await supabase
      .from('modules')
      .select('id, course_id, title, content_jsonb, order_index')
      .order('course_id, order_index');
    
    if (error) {
      console.error('‚ùå Erro ao buscar m√≥dulos:', error);
      return;
    }
    
    console.log(`üìä Total de m√≥dulos encontrados: ${modules.length}`);
    
    // Agrupar por curso
    const modulesByCourse = {};
    modules.forEach(module => {
      if (!modulesByCourse[module.course_id]) {
        modulesByCourse[module.course_id] = [];
      }
      modulesByCourse[module.course_id].push(module);
    });
    
    // Analisar cada curso
    for (const [courseId, courseModules] of Object.entries(modulesByCourse)) {
      console.log(`\nüìö Curso ID: ${courseId}`);
      console.log(`   M√≥dulos: ${courseModules.length}`);
      
      // Verificar se todos os m√≥dulos t√™m o mesmo conte√∫do
      const contents = courseModules.map(m => {
        const html = m.content_jsonb?.html || '';
        return html.replace(/\s+/g, ' ').trim();
      });
      
      const uniqueContents = [...new Set(contents)];
      
      if (uniqueContents.length === 1 && uniqueContents[0] !== '') {
        console.log('   ‚ö†Ô∏è  PROBLEMA: Todos os m√≥dulos t√™m o mesmo conte√∫do!');
        console.log(`   üìù Conte√∫do duplicado (${uniqueContents[0].length} chars): ${uniqueContents[0].substring(0, 100)}...`);
      } else if (uniqueContents.length === 1 && uniqueContents[0] === '') {
        console.log('   ‚ö†Ô∏è  PROBLEMA: Todos os m√≥dulos est√£o vazios!');
      } else {
        console.log('   ‚úÖ M√≥dulos t√™m conte√∫dos √∫nicos');
      }
      
      // Mostrar detalhes de cada m√≥dulo
      courseModules.forEach((module, index) => {
        const html = module.content_jsonb?.html || '';
        const normalizedHtml = html.replace(/\s+/g, ' ').trim();
        console.log(`   ${index + 1}. ${module.title} (${normalizedHtml.length} chars): ${normalizedHtml.substring(0, 50)}...`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

checkModules();