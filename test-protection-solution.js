import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes do Supabase
const supabaseUrl = 'https://ncrlojjfkhevjotchhxi.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5jcmxvampma2hldmpvdGNoaHhpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxOTc3MjMsImV4cCI6MjA2OTc3MzcyM30.f3DPtL3s_J7vzk0JmYsfkbd7Yyx1IDpy1IN-k6cwiZY';
const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * Teste para verificar se a solu√ß√£o de prote√ß√£o contra sobrescrita funciona
 */
async function testProtectionSolution() {
  console.log('üß™ Iniciando teste da solu√ß√£o de prote√ß√£o...');
  
  try {
    // 1. Buscar um m√≥dulo para teste
    const { data: modules, error: fetchError } = await supabase
      .from('modules')
      .select('id, title, content_jsonb')
      .limit(1);
      
    if (fetchError) {
      console.error('‚ùå Erro ao buscar m√≥dulos:', fetchError);
      return;
    }
    
    if (!modules || modules.length === 0) {
      console.log('‚ö†Ô∏è Nenhum m√≥dulo encontrado para teste');
      return;
    }
    
    const testModule = modules[0];
    const originalContent = testModule.content_jsonb?.html || '';
    
    console.log('üìã M√≥dulo de teste:', {
      id: testModule.id,
      title: testModule.title,
      originalContentLength: originalContent.length
    });
    
    // 2. Simular extens√£o de conte√∫do
    const extendedContent = originalContent + '\n\n<p>ü§ñ Conte√∫do estendido por IA para teste de prote√ß√£o</p>';
    
    console.log('ü§ñ Simulando extens√£o de conte√∫do...');
    console.log('üìä Dados da extens√£o:', {
      originalLength: originalContent.length,
      extendedLength: extendedContent.length,
      addedContent: extendedContent.length - originalContent.length
    });
    
    // 3. Salvar conte√∫do estendido
    const { error: updateError } = await supabase
      .from('modules')
      .update({ 
        content_jsonb: { html: extendedContent },
        updated_at: new Date().toISOString()
      })
      .eq('id', testModule.id);
      
    if (updateError) {
      console.error('‚ùå Erro ao salvar conte√∫do estendido:', updateError);
      return;
    }
    
    console.log('‚úÖ Conte√∫do estendido salvo com sucesso');
    
    // 4. Aguardar um pouco (simular delay do debounce)
    console.log('‚è≥ Aguardando 3 segundos (simulando delay do debounce)...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 5. Verificar se o conte√∫do ainda est√° l√°
    const { data: verifyModule, error: verifyError } = await supabase
      .from('modules')
      .select('content_jsonb')
      .eq('id', testModule.id)
      .single();
      
    if (verifyError) {
      console.error('‚ùå Erro ao verificar conte√∫do:', verifyError);
      return;
    }
    
    const finalContent = verifyModule.content_jsonb?.html || '';
    
    console.log('üîç Verifica√ß√£o final:', {
      originalLength: originalContent.length,
      extendedLength: extendedContent.length,
      finalLength: finalContent.length,
      contentPreserved: finalContent === extendedContent,
      contentLost: finalContent === originalContent
    });
    
    if (finalContent === extendedContent) {
      console.log('‚úÖ SUCESSO: Conte√∫do estendido foi preservado!');
      console.log('üõ°Ô∏è A solu√ß√£o de prote√ß√£o funcionou corretamente');
    } else if (finalContent === originalContent) {
      console.log('‚ùå FALHA: Conte√∫do estendido foi perdido');
      console.log('‚ö†Ô∏è A solu√ß√£o de prote√ß√£o n√£o funcionou');
    } else {
      console.log('‚ö†Ô∏è RESULTADO INESPERADO: Conte√∫do foi modificado de forma inesperada');
    }
    
    // 6. Restaurar conte√∫do original
    console.log('üîÑ Restaurando conte√∫do original...');
    const { error: restoreError } = await supabase
      .from('modules')
      .update({ 
        content_jsonb: { html: originalContent },
        updated_at: new Date().toISOString()
      })
      .eq('id', testModule.id);
      
    if (restoreError) {
      console.error('‚ùå Erro ao restaurar conte√∫do:', restoreError);
    } else {
      console.log('‚úÖ Conte√∫do original restaurado');
    }
    
  } catch (error) {
    console.error('‚ùå Erro inesperado no teste:', error);
  }
}

// Executar o teste
testProtectionSolution();